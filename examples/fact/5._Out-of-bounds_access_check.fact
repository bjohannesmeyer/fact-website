/* FaCT requires its source program to be publicly safe, e.g., memory-safe using
 * only publicly-visible information. This example requires the assumption `i <
 * len buf` --- even though it already assumes `secret_index < len buf` and
 * checks that `i < secret_index` --- because otherwise the transformation
 * making the conditional branch constant-time would inadvertantly reintroduce
 * the buffer overflow that the branch is already implicitly protecting against.
 * */

void potential_oob(
    secret mut uint32[] buf,
    public uint64 i,
    secret uint64 secret_index) {

  /* We assume we've already checked that the secret index is less than the
   * length of buf */
  assume(secret_index < len buf);

  /* Commenting out the line below produces a compilation error because without
   * it, the transformation making the conditional branch constant-time would
   * inadvertantly introduce a potential buffer overflow. */
  assume(i < len buf);

  if (i < secret_index) {
    buf[i] = 0;
  }
}
