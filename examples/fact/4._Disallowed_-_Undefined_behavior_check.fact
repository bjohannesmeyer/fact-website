/* FaCT requires its source program to be publicly safe, e.g., free from
 * undefined behaviors such as bit-shift overflow or division-by-zero using only
 * publicly-visible information. This example cannot compile since it is not
 * publicly safe: the transformation removing the conditional branch would
 * inadvertantly potentially re-introduce the bit-shift overflow that the branch
 * is there to prevent. One workaround is to relax the defense model, and simply
 * leak the value of `y < 32`, either by adding `assume(y < 32)` or changing the
 * conditional to `if (declassify(y < 32))`. Another approach that secures the
 * values of `y < 32` at the cost of performance is to instead change the
 * conditional to `for (i from 0 to 31) { if i == y { return x << i; } }`. */

secret uint32 potential_ub(secret uint32 x, secret uint32 y) {
  if (y < 32) {
    return x << y;
  }
  return 0;
}
